#!/usr/bin/env python3
from lark import Lark
from dicelang import visitor
from dicelang import grammar
from dicelang import datastore
from dicelang import ownership
from dicelang import builtin

class Interpreter(object):
  GLOBAL_ID = -1
  def __init__(self):
    self.parser = Lark(grammar.raw_text, start='start', parser='earley')
    self.datastore = datastore.DataStore()
    self.visitor = visitor.Visitor(self.datastore)
  
  def keys(self, mode, owner_id=GLOBAL_ID):
    return self.datastore.view(mode, owner_id)
  
  def builtin_keys(self):
    return list(builtin.variables.keys())
  
  def execute(self, command, user, server):
    '''Passes the abstract syntax tree generated by the parser to the
    interpreter kernel with the user's name and the server's name for
    variable retrieval and emplacement.'''
    tree = self.parser.parse(command)
    scoping_data = ownership.ScopingData(user, server) 
    value, printout = self.visitor.walk(tree, scoping_data, True)
    self.put_last(user, server, value)
    return (value, printout)
  
  def put_last(self, user, server, value):
    '''Store most-recently acquired value in the special `_` variable for each
    kind of storage.'''
    self.datastore.put(user, '_', value, 'private')
    self.datastore.put(server, '_', value, 'server')
    self.datastore.put(Interpreter.GLOBAL_ID, '_', 'value', 'global')
  
  def get_print_queue_on_error(self, user):
    return self.visitor.get_print_queue_on_error(user)

