#!/usr/bin/env python3
import os
from lark import Lark
from dicelang import visitor
from dicelang import grammar
from dicelang import datastore

class Interpreter(object):
  GLOBAL_ID = -1
  def __init__(self):
    self.parser = Lark(grammar.raw_text, start='start', parser='earley')
    try:
      vars_directory = os.environ['DICELANG_DATASTORE']
    except KeyError:
      vars_directory = 'vars'
    
    if not os.path.isdir(vars_directory):
      os.mkdir(vars_directory)
    
    self.datastore = datastore.DataStore(vars_directory, 'private')
    self.visitor = visitor.Visitor(self.datastore)
    
  def keys(self, datastore_name, owner_id=GLOBAL_ID):
    # if datastore_name in ('public', 'global'):
    #   datastore = self.public
    # elif datastore_name in ('server', 'shared'):
    #   datastore = self.server
    # elif datastore_name in ('core',):
    #   datastore = self.core
    # else:
    #   datastore = self.private
    # 
    # try:
    #   out = sorted(datastore.variables[owner_id].keys())
    # except KeyError:
    #   out = [ ]
    # return out
    return ''  

  
  def execute(self, command, user, server):
    '''Passes the abstract syntax tree generated by the parser to the
    interpreter kernel with the user's name and the server's name for
    variable retrieval and emplacement. The result is stored in the
    variable known as `_`. The private `_` is intended to be the last
    result by that user, the server `_` is intended to be the last result
    on that server, and the public `_` is intended to be the last result
    by any command passed to the interpreter.'''
    tree = self.parser.parse(command)
    out = self.visitor.walk(tree, user, server)
    self.datastore.put(user, '_', out, 'private')
    self.datastore.put(server, '_', out, 'server')
    self.datastore.put(Interpreter.GLOBAL_ID, '_', out, 'global')
    return out

