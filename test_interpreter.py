import interpreter
import pytest

class TestInterpreter:

    @pytest.mark.parametrize("command, expected",
                            [["[]",                  []],
                             ["[2]",                 [2]],
                             ["[1,2,3]",             [1,2,3]],
                             ['["a","b","c"]',       ["a","b","c"]],
                             ["[True, False]",       [True, False]],
                             ["[1,2,3][0]",          1],
                             ['["a","b"][1]',        "b"],
                             ["[[[True]]][0][0][0]", True],
                             ["1",                   1],
                             ["-1",                  -1],
                             ["+-2",                 2],
                             ["1+1",                 2],
                             ["1-1",                 0],
                             ["1+1-1",               1],
                             ["1*1",                 1],
                             ["2*2",                 4],
                             ["2**2",                4],
                             ["2**3",                8],
                             ["2%%8",                3],
                             ["4/2",                 2],
                             ["5/2",                 2.5],
                             ["5//2",                2],
                             ["[1] + [1]",           [1,1]],
                             ["[1] - [1]",           []],
                             ["[1,2] - [1,2]",       []],
                             ["[1,2,3] - [1,2]",     [3]],
                             ["[1,2] + [1,2]",       [1,2,1,2]],
                             ["(((0)))",             0],
                             ["(1 * (1 + (1 / 1)))", 2],
                             ["-10 - -9",            -1],
                             ["6$9",                 69],
                             ["1 << 4",              16],
                             ["10 >> 2",             2],
                             ["6 == 10 - 4",         True],
                             ["7 != 7.1",            True],
                             ["9 > 5",               True],
                             ["5 > 9",               False],
                             ["9 < 5",               False],
                             ["5 < 9",               True],
                             ["8 >= 8",              True],
                             ["4 <= 4.5",            True],
                             ["1 and 0",             0],
                             ["1 and 1",             1],
                             ["0 and 1",             0],
                             ["0 and 0",             0],
                             ["not 1",               False],
                             ["not 0",               True],
                             ["0 or 1",              1],
                             ["1 or 0",              1],
                             ["0 or 0",              0],
                             ["1 or 1",              1],
                             ["4 xor 0",             True],
                             ["0 xor 4",             True],
                             ["4 xor 4",             False],
                             ["0 xor 0",             False],
                             ["True",                True],
                             ["False",               False],
                             ["[ ]",                 []],
                             ['"double quotes"',     "double quotes"],
                             ["'single quotes'",     "single quotes"],
                             ["{}",                  {}],
                             ["{'x': 4}",            {"x":4}],
                             ["{'x':4}['x']",        4]])
    def test_execute(self, command, expected):
        dicelark = interpreter.Interpreter("grammar.lark")
        user = "Tester"
        server = "Test Server"

        actual = dicelark.execute(command, user, server)

        assert actual == expected
