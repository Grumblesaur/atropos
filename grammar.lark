start: expression (";" expression)* (";")?

identifier_get: identifier
identifier_set: identifier "=" expression
identifier_set_subscript: identifier ("[" expression "]")+ "=" expression

deletion: "del" identifier                       -> delete_variable
        | "del" identifier ("[" expression "]")+ -> delete_element

assignment: identifier_set
          | identifier_set_subscript

block: "begin" expression (";" expression)* (";")? "end"

function: "(" (PARAM ("," PARAM)* )? ")" "->" [block | short_body]

function_call: expression "(" (expression ("," expression)* )? ")"

for_loop: "for" identifier "in" expression "do" [block | short_body]

while_loop: "while" expression "do" [block | short_body]

do_while_loop: "do" [block | short_body] "while" expression

conditional: "if" expression "then" [block | short_body] -> if
           | "if" expression "then" [block | short_body] "else" [block | short_body] -> if_else

short_body: expression

expression: assignment
          | deletion
          | block
          | function
          | function_call
          | for_loop
          | while_loop
          | do_while_loop
          | conditional
          | if_expr

if_expr: repeat "if" repeat "else" if_expr -> inline_if
       | repeat "if"        "else" if_expr -> inline_if_binary
       | repeat

repeat: repeat "^" bool_or -> repetition
      | bool_or

bool_or: bool_or "or" bool_xor -> logical_or
       | bool_xor

bool_xor: bool_xor "xor" bool_and -> logical_xor
        | bool_and

bool_and: bool_and "and" bool_not -> logical_and
        | bool_not

bool_not: "not" bool_not -> logical_not
        | comp

comp: shift ">"  shift       -> greater_than
    | shift ">=" shift       -> greater_equal
    | shift "==" shift       -> equal
    | shift "!=" shift       -> not_equal
    | shift "<=" shift       -> less_equal
    | shift "<"  shift       -> less_than
    | shift "in" shift       -> present
    | shift "not" "in" shift -> absent
    | shift "is" shift       -> identical
    | shift "is" "not" shift -> different
    | shift

shift: shift "<<" arithm -> left_shift
     | shift ">>" arithm -> right_shift
     | arithm

arithm: arithm "+" term -> addition
      | arithm "-" term -> subtraction
      | arithm "$" term -> catenation
      | term

term: term "*"  factor -> multiplication
    | term "/"  factor -> division
    | term "%"  factor -> remainder
    | term "//" factor -> floor_division
    | factor

factor: "-" factor -> negation
      | "+" factor -> absolute_value
      | power

power: power "**" reduction -> exponent
     | power "%%" reduction -> logarithm
     | reduction

reduction: "&" slice -> sum_or_join
         | "#" slice -> length
         | slice

slice: slice ("["            ":"             (":")?           "]") -> whole_slice
     | slice ("[" expression ":"             (":")?           "]") -> start_slice
     | slice ("[" expression ":"              ":"  expression "]") -> start_step_slice
     | slice ("[" expression ":" expression  (":")?           "]") -> start_stop_slice
     | slice ("[" expression ":" expression   ":"  expression "]") -> fine_slice
     | slice ("["            ":" expression  (":")?           "]") -> stop_slice
     | slice ("["            ":" expression   ":"  expression "]") -> stop_step_slice
     | slice ("["            ":"              ":"  expression "]") -> step_slice
     | slice ("[" expression "]")                                  -> not_a_slice
     | die

die: die "d" atom          -> scalar_die_all
   | die "d" atom "h" atom -> scalar_die_highest
   | die "d" atom "l" atom -> scalar_die_lowest
   | die "r" atom          -> vector_die_all
   | die "r" atom "h" atom -> vector_die_highest
   | die "r" atom "l" atom -> vector_die_lowest
   | atom

atom: number_literal
    | boolean_literal
    | string_literal
    | list_literal
    | dict_literal
    | undefined_literal
    | identifier_get
    | "(" expression ")" -> priority

undefined_literal: UNDEFINED

boolean_literal: TRUE
               | FALSE

number_literal: NUMBER

string_literal: STRING

list_literal: "[" expression ("," expression)* (",")? "]"       -> populated_list
            | "[" "]"                                           -> empty_list
            | "[" expression "to" expression "]"                -> range_list
            | "[" expression "to" expression "by" expression "]"-> range_list_stepped

dict_literal: "{" key_value_pair ("," key_value_pair)* (",")? "}" -> populated_dict
            | "{" "}"                                             -> empty_dict

key_value_pair: expression ":" expression

identifier: scoped_identifier
          | private_identifier
          | server_identifier
          | global_identifier

scoped_identifier :          IDENT
private_identifier: "my"     IDENT
server_identifier : "our"    IDENT
global_identifier : "global" IDENT

TRUE:  "True"
FALSE: "False"
UNDEFINED: "Undefined"
IDENT: /[a-zA-Z_]+[a-zA-Z0-9_]*/
PARAM: /[a-zA-Z_]+[a-zA-Z0-9_]*/
STRING: /("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i

%import common.NUMBER -> NUMBER
%import common.WS
%ignore WS



